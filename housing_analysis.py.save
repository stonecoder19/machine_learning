#%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import os
import tarfile
from six.moves import urllib
import hashlib
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

DOWNLOAD_ROOT = "https://github.com/ageron/handson-ml/raw/master/"
HOUSING_PATH = "datasets/housing"
HOUSING_URL = DOWNLOAD_ROOT + HOUSING_PATH

def fetch_housing_data(
      housing_url=HOUSING_URL,
      housing_path=HOUSING_PATH):
    
   if not os.path.isdir(housing_path):
       os.makedirs(housing_path)

   tgz_path = os.path.join(housing_path, "housing.tgz")

   urllib.request.urlretrieve(housing_url, tgz_path)

   #extract tarfile and close path
   housing_tgz = tarfile.open(tgz_path)
   housing_tgz.extractall(path=housing_path)
   housing_tgz.close()

def load_housing_data(housing_path=HOUSING_PATH):
    csv_path = os.path.join(housing_path,"housing.csv")
    return pd.read_csv(csv_path)

#fetch_housing_data()
housing = load_housing_data()

#print(housing.head())

#print(housing.info())

#print(housing['ocean_proximity'].value_counts())

#print(housing.describe())

#print(housing.hist(bins=50,figsize=(20,15)))
#plt.show()


def split_train_test(data, test_ratio):
    shuffled_indices = np.random.permutation(len(data))

    test_set_size = int(len(data) * test_ratio)

    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]

    return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set = split_train_test(housing, 0.2)

print(len(train_set), "train +", len(test_set), "test")

def test_set_check(identifier, test_ratio, hash):
    return bytearray(hash(np.int64(identifier)).digest())[-1] < 256 * test_ratio

def split_train_test_by_id(data,test_ratio, id_column, hash=hashlib.md5):
    ids = data[id_column]
    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio, hash))

    return data.loc[~in_test_set], data.loc[in_test_set]


housing_with_id = housing.reset_index()

train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, "index")

#print(train_set.head())
#print(test_set.head())

housing_with_id["id"] = housing["longitude"] * 1000 + housing["latitude"]

train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, "id")

#print(test_set.head())

train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)

#print(test_set.head())


#housing["median_income"].hist()
#plt.show()

housing["income_cat"] = np.ceil(housing["median_income"] / 1.5)

housing["income_cat"].where(housing["income_cat"] < 5, 5.0, inplace=True)

print(housing["income_cat"].value_counts())
housing["income_cat"].hist()
plt.show()

